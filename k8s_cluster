#Kubernetes Cluster Setup Documentation

#Step 1: Set Hostnames

#Set a unique hostname for each node:

#Master Node:

sudo hostnamectl set-hostname master-node

#Worker Node 1:

sudo hostnamectl set-hostname worker-node-1

#Worker Node 2:

sudo hostnamectl set-hostname worker-node-2

#Update the /etc/hosts file on all nodes:

sudo nano /etc/hosts

#Add the following lines:

192.168.1.100 master-node
192.168.1.101 worker-node-1
192.168.1.102 worker-node-2

#Save and exit.
#Step 2: Update and Upgrade System

#Run the following command on all nodes:

sudo apt update && sudo apt upgrade -y

#Step 3: Disable Swap

#Disable swap on all nodes:

sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

#Step 4: Load Kernel Modules

#Run on all nodes:

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

#Enable required sysctl parameters:

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

#Step 5: Install Container Runtime (Containerd)

#Run on all nodes:

sudo apt install -y containerd

#Configure containerd:

sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null

#Modify config file to use systemd cgroup driver:

sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

#Restart containerd:

sudo systemctl restart containerd
sudo systemctl enable containerd


#Step 6: Install Kubernetes Components

#Run on all nodes:

sudo apt update
sudo apt install -y apt-transport-https ca-certificates curl

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubernetes.gpg

echo "deb https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update
sudo apt install -y kubelet kubeadm kubectl

sudo systemctl enable kubelet

#Step 7: Initialize Kubernetes on Master Node

#Run on master node:

sudo kubeadm init --pod-network-cidr=192.168.0.0/16

#After initialization, you will get a kubeadm join command. Save it for worker nodes.

#Step 8: Configure kubectl on Master Node

#Run on master node:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#Step 9: Deploy a Network Add-on

#Run on master node:

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26/manifests/calico.yaml

#Verify:

kubectl get pods -n kube-system

#Step 10: Join Worker Nodes to Cluster

#Run on each worker node:

kubeadm join 192.168.1.100:6443 --token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#On the master node, verify the worker nodes have joined:

kubectl get nodes

#Step 11: Test Kubernetes Cluster

#Deploy a simple test pod:

kubectl create deployment nginx --image=nginx
kubectl get pods

#Expose the deployment:

kubectl expose deployment nginx --port=80 --type=NodePort
kubectl get svc

#Find the assigned NodePort and access Nginx:

curl http://<node-ip>:<node-port>









